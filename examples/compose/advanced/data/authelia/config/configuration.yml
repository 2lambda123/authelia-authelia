---
log:
  level: 'debug'

totp:
  disable: false
  issuer: '{{ env "X_COMPOSE_DOMAIN" }}'
  # algorithm: 'SHA1'
  # digits: 6
  # period: 30
  # skew: 1
  # secret_size: 32

webauthn:
  disable: false
  # timeout: '60 seconds'
  # display_name: 'Authelia'
  # attestation_conveyance_preference: 'indirect'
  # user_verification: 'preferred'

duo_api:
  disable: true
  # hostname: 'api-123456789.example.com'
  # integration_key: 'ABCDEF'
  ## Secret can also be set using a secret: https://www.authelia.com/c/secrets
  # secret_key: '1234567890abcdefghifjkl'
  # enable_self_enrollment: false

authentication_backend:
  # refresh_interval: '5 minutes'

  password_reset:
    disable: false

  {{- if (not (eq (env "X_COMPOSE_LDAP_IMPLEMENTATION") "")) }}
  ldap:
    address: '{{ env "X_COMPOSE_LDAP_ADDRESS" }}'
    implementation: '{{ env "X_COMPOSE_LDAP_IMPLEMENTATION" }}'
    base_dn: '{{ env "X_COMPOSE_LDAP_BASE_DN" }}'
    additional_users_dn: '{{ env "X_COMPOSE_LDAP_ADDITIONAL_USERS_DN" }}'
    # users_filter: '(&({username_attribute}={input})(objectClass=person))'
    additional_groups_dn: '{{ env "X_COMPOSE_LDAP_ADDITIONAL_GROUPS_DN" }}'
    # groups_filter: '(&(member={dn})(objectClass=groupOfNames))'
    # group_search_mode: 'filter'
    # permit_referrals: false
    user: '{{ env "X_COMPOSE_LDAP_ADDITIONAL_GROUPS_DN" }}'
    # attributes:
      # distinguished_name: ''
      # username: 'uid'
      # display_name: 'displayName'
      # mail: 'mail'
      # member_of: 'memberOf'
      # group_name: 'cn'
  {{- else }}
  file:
    path: '/config/users_database.yml'
    # watch: false
    # search:
      # email: false
      # case_insensitive: false
    # password:
      # algorithm: 'argon2'
      # argon2:
        # variant: 'argon2id'
        # iterations: 3
        # memory: 65536
        # parallelism: 4
        # key_length: 32
        # salt_length: 16
      # scrypt:
        # iterations: 16
        # block_size: 8
        # parallelism: 1
        # key_length: 32
        # salt_length: 16
      # pbkdf2:
        # variant: 'sha512'
        # iterations: 310000
        # salt_length: 16
      # sha2crypt:
        # variant: 'sha512'
        # iterations: 50000
        # salt_length: 16
      # bcrypt:
        # variant: 'standard'
        # cost: 12
  {{- end }}

access_control:
  default_policy: 'deny'

  networks:
    - name: 'internal'
      networks:
        - '10.10.0.0/16'
        - '192.168.2.0/24'
  rules:
    - domain: 'whoami.{{ env "X_COMPOSE_DOMAIN" }}'
      policy: 'one_factor'

session:
  cookies:
    - name: 'authelia_session'
      domain: '{{ env "X_COMPOSE_DOMAIN" }}'
      authelia_url: 'https://auth.{{ env "X_COMPOSE_DOMAIN" }}'
      default_redirection_url: 'https://whoami.{{ env "X_COMPOSE_DOMAIN" }}'
      # same_site: 'lax'
      # inactivity: '5 minutes'
      # expiration: '1 hour'
      # remember_me: '1 month'
storage:
  local:
    path: '/config/db.sqlite3'
  postgres:
    address: 'tcp://postgres:5432'
    database: 'authelia'
    # schema: 'public'
    username: 'authelia'
    # timeout: '5 seconds'
notifier:
  disable_startup_check: false
  filesystem:
    filename: '/config/notification.txt'

  ##
  ## SMTP (Notification Provider)
  ##
  ## Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate.
  ## [Security] By default Authelia will:
  ##   - force all SMTP connections over TLS including unauthenticated connections
  ##      - use the disable_require_tls boolean value to disable this requirement
  ##        (only works for unauthenticated connections)
  ##   - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates
  ##     (configure in tls section)
  # smtp:
    ## The address of the SMTP server to connect to in the address common syntax.
    # address: 'smtp://127.0.0.1:25'

    ## The connection timeout in the duration common syntax.
    # timeout: '5 seconds'

    ## The username used for SMTP authentication.
    # username: 'test'

    ## The password used for SMTP authentication.
    ## Can also be set using a secret: https://www.authelia.com/c/secrets
    # password: 'password'

    ## The sender is used to is used for the MAIL FROM command and the FROM header.
    ## If this is not defined and the username is an email, we use the username as this value. This can either be just
    ## an email address or the RFC5322 'Name <email address>' format.
    # sender: 'Authelia <admin@example.com>'

    ## HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost.
    # identifier: 'localhost'

    ## Subject configuration of the emails sent. {title} is replaced by the text from the notifier.
    # subject: '[Authelia] {title}'

    ## This address is used during the startup check to verify the email configuration is correct.
    ## It's not important what it is except if your email server only allows local delivery.
    # startup_check_address: 'test@authelia.com'

    ## By default we require some form of TLS. This disables this check though is not advised.
    # disable_require_tls: false

    ## Disables sending HTML formatted emails.
    # disable_html_emails: false

    # tls:
      ## The server subject name to check the servers certificate against during the validation process.
      ## This option is not required if the certificate has a SAN which matches the address options hostname.
      # server_name: 'smtp.example.com'

      ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the
      ## certificate or the certificate of the authority signing the certificate to the certificates directory which is
      ## defined by the `certificates_directory` option at the top of the configuration.
      ## It's important to note the public key should be added to the directory, not the private key.
      ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not
      ## important to the administrator.
      # skip_verify: false

      ## Minimum TLS version for the connection.
      # minimum_version: 'TLS1.2'

      ## Maximum TLS version for the connection.
      # maximum_version: 'TLS1.3'

      ## The certificate chain used with the private_key if the server requests TLS Client Authentication
      ## i.e. Mutual TLS.
      # certificate_chain: |
        # -----BEGIN CERTIFICATE-----
        # ...
        # -----END CERTIFICATE-----
        # -----BEGIN CERTIFICATE-----
        # ...
        # -----END CERTIFICATE-----

      ## The private key used with the certificate_chain if the server requests TLS Client Authentication
      ## i.e. Mutual TLS.
      # private_key: |
        # -----BEGIN RSA PRIVATE KEY-----
        # ...
        # -----END RSA PRIVATE KEY-----
...
