# ========================================
# ===== Build image for the frontend =====
# ========================================
FROM node:16-alpine AS builder-frontend

WORKDIR /node/src/app
COPY web .

# Install the dependencies and build
RUN yarn install --frozen-lockfile && INLINE_RUNTIME_CHUNK=false yarn coverage

# =======================================
# ===== Build image for the backend =====
# =======================================
FROM golang:1.16.4-alpine AS builder-backend

ARG BUILD_TAG
ARG BUILD_COMMIT

WORKDIR /go/src/app

COPY / ./

# Prepare static files to be embedded in Go binary
COPY --from=builder-frontend /node/src/app/build internal/server/public_html

# gcc and musl-dev are required for building go-sqlite3
RUN \
apk --no-cache add gcc musl-dev && \
go mod download && \
mv api internal/server/public_html/api && \
cd cmd/authelia && \
go test -c --tags coverage -covermode=atomic -ldflags \
"-s -w -linkmode external -extldflags -static -X 'github.com/authelia/authelia/internal/utils.BuildBranch=${BUILD_BRANCH}' -X 'github.com/authelia/authelia/internal/utils.BuildTag=${BUILD_TAG}' -X 'github.com/authelia/authelia/internal/utils.BuildCommit=${BUILD_COMMIT}' -X 'github.com/authelia/authelia/internal/utils.BuildDate=${BUILD_DATE}' -X 'github.com/authelia/authelia/internal/utils.BuildStateTag=${BUILD_STATE_TAg}' -X 'github.com/authelia/authelia/internal/utils.BuildStateExtra=${BUILD_STATE_EXTRA}'" \
-o authelia -coverpkg github.com/authelia/authelia/...

# ===================================
# ===== Authelia official image =====
# ===================================
FROM alpine:3.13.5

RUN apk --no-cache add ca-certificates tzdata

WORKDIR /app

COPY --from=builder-backend /go/src/app/cmd/authelia/authelia /go/src/app/LICENSE /go/src/app/healthcheck.sh ./

EXPOSE 9091

VOLUME /config

ENV PATH="/app:${PATH}"

CMD ["authelia", "-test.coverprofile=/authelia/coverage.txt", "COVERAGE", "--config", "/config/configuration.yml"]
HEALTHCHECK --interval=30s --timeout=3s CMD /app/healthcheck.sh
