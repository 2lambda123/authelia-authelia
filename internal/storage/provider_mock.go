// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/provider.go

// Package storage is a generated GoMock package.
package storage

import (
	"context"
	"reflect"
	"time"

	"github.com/authelia/authelia/v4/internal/models"
	"github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AppendAuthenticationLog mocks base method.
func (m *MockProvider) AppendAuthenticationLog(ctx context.Context, attempt models.AuthenticationAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendAuthenticationLog", ctx, attempt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendAuthenticationLog indicates an expected call of AppendAuthenticationLog.
func (mr *MockProviderMockRecorder) AppendAuthenticationLog(ctx, attempt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendAuthenticationLog", reflect.TypeOf((*MockProvider)(nil).AppendAuthenticationLog), ctx, attempt)
}

// DeleteTOTPSecret mocks base method.
func (m *MockProvider) DeleteTOTPSecret(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTOTPSecret", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTOTPSecret indicates an expected call of DeleteTOTPSecret.
func (mr *MockProviderMockRecorder) DeleteTOTPSecret(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTOTPSecret", reflect.TypeOf((*MockProvider)(nil).DeleteTOTPSecret), ctx, username)
}

// FindIdentityVerificationToken mocks base method.
func (m *MockProvider) FindIdentityVerificationToken(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIdentityVerificationToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIdentityVerificationToken indicates an expected call of FindIdentityVerificationToken.
func (mr *MockProviderMockRecorder) FindIdentityVerificationToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIdentityVerificationToken", reflect.TypeOf((*MockProvider)(nil).FindIdentityVerificationToken), ctx, token)
}

// LoadAuthenticationLogs mocks base method.
func (m *MockProvider) LoadAuthenticationLogs(ctx context.Context, username string, fromDate time.Time, limit, page int) ([]models.AuthenticationAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAuthenticationLogs", ctx, username, fromDate, limit, page)
	ret0, _ := ret[0].([]models.AuthenticationAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAuthenticationLogs indicates an expected call of LoadAuthenticationLogs.
func (mr *MockProviderMockRecorder) LoadAuthenticationLogs(ctx, username, fromDate, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAuthenticationLogs", reflect.TypeOf((*MockProvider)(nil).LoadAuthenticationLogs), ctx, username, fromDate, limit, page)
}

// LoadPreferred2FAMethod mocks base method.
func (m *MockProvider) LoadPreferred2FAMethod(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPreferred2FAMethod", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPreferred2FAMethod indicates an expected call of LoadPreferred2FAMethod.
func (mr *MockProviderMockRecorder) LoadPreferred2FAMethod(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPreferred2FAMethod", reflect.TypeOf((*MockProvider)(nil).LoadPreferred2FAMethod), ctx, username)
}

// LoadTOTPSecret mocks base method.
func (m *MockProvider) LoadTOTPSecret(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTOTPSecret", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTOTPSecret indicates an expected call of LoadTOTPSecret.
func (mr *MockProviderMockRecorder) LoadTOTPSecret(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTOTPSecret", reflect.TypeOf((*MockProvider)(nil).LoadTOTPSecret), ctx, username)
}

// LoadU2FDeviceHandle mocks base method.
func (m *MockProvider) LoadU2FDeviceHandle(ctx context.Context, username string) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadU2FDeviceHandle", ctx, username)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadU2FDeviceHandle indicates an expected call of LoadU2FDeviceHandle.
func (mr *MockProviderMockRecorder) LoadU2FDeviceHandle(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadU2FDeviceHandle", reflect.TypeOf((*MockProvider)(nil).LoadU2FDeviceHandle), ctx, username)
}

// RemoveIdentityVerificationToken mocks base method.
func (m *MockProvider) RemoveIdentityVerificationToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIdentityVerificationToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIdentityVerificationToken indicates an expected call of RemoveIdentityVerificationToken.
func (mr *MockProviderMockRecorder) RemoveIdentityVerificationToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIdentityVerificationToken", reflect.TypeOf((*MockProvider)(nil).RemoveIdentityVerificationToken), ctx, token)
}

// SaveIdentityVerificationToken mocks base method.
func (m *MockProvider) SaveIdentityVerificationToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIdentityVerificationToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveIdentityVerificationToken indicates an expected call of SaveIdentityVerificationToken.
func (mr *MockProviderMockRecorder) SaveIdentityVerificationToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIdentityVerificationToken", reflect.TypeOf((*MockProvider)(nil).SaveIdentityVerificationToken), ctx, token)
}

// SavePreferred2FAMethod mocks base method.
func (m *MockProvider) SavePreferred2FAMethod(ctx context.Context, username, method string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePreferred2FAMethod", ctx, username, method)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePreferred2FAMethod indicates an expected call of SavePreferred2FAMethod.
func (mr *MockProviderMockRecorder) SavePreferred2FAMethod(ctx, username, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePreferred2FAMethod", reflect.TypeOf((*MockProvider)(nil).SavePreferred2FAMethod), ctx, username, method)
}

// SaveTOTPSecret mocks base method.
func (m *MockProvider) SaveTOTPSecret(ctx context.Context, username, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTOTPSecret", ctx, username, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTOTPSecret indicates an expected call of SaveTOTPSecret.
func (mr *MockProviderMockRecorder) SaveTOTPSecret(ctx, username, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTOTPSecret", reflect.TypeOf((*MockProvider)(nil).SaveTOTPSecret), ctx, username, secret)
}

// SaveU2FDeviceHandle mocks base method.
func (m *MockProvider) SaveU2FDeviceHandle(ctx context.Context, username string, keyHandle, publicKey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveU2FDeviceHandle", ctx, username, keyHandle, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveU2FDeviceHandle indicates an expected call of SaveU2FDeviceHandle.
func (mr *MockProviderMockRecorder) SaveU2FDeviceHandle(ctx, username, keyHandle, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveU2FDeviceHandle", reflect.TypeOf((*MockProvider)(nil).SaveU2FDeviceHandle), ctx, username, keyHandle, publicKey)
}

// MockRegulatorProvider is a mock of RegulatorProvider interface.
type MockRegulatorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRegulatorProviderMockRecorder
}

// MockRegulatorProviderMockRecorder is the mock recorder for MockRegulatorProvider.
type MockRegulatorProviderMockRecorder struct {
	mock *MockRegulatorProvider
}

// NewMockRegulatorProvider creates a new mock instance.
func NewMockRegulatorProvider(ctrl *gomock.Controller) *MockRegulatorProvider {
	mock := &MockRegulatorProvider{ctrl: ctrl}
	mock.recorder = &MockRegulatorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegulatorProvider) EXPECT() *MockRegulatorProviderMockRecorder {
	return m.recorder
}

// AppendAuthenticationLog mocks base method.
func (m *MockRegulatorProvider) AppendAuthenticationLog(ctx context.Context, attempt models.AuthenticationAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendAuthenticationLog", ctx, attempt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendAuthenticationLog indicates an expected call of AppendAuthenticationLog.
func (mr *MockRegulatorProviderMockRecorder) AppendAuthenticationLog(ctx, attempt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendAuthenticationLog", reflect.TypeOf((*MockRegulatorProvider)(nil).AppendAuthenticationLog), ctx, attempt)
}

// LoadAuthenticationLogs mocks base method.
func (m *MockRegulatorProvider) LoadAuthenticationLogs(ctx context.Context, username string, fromDate time.Time, limit, page int) ([]models.AuthenticationAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAuthenticationLogs", ctx, username, fromDate, limit, page)
	ret0, _ := ret[0].([]models.AuthenticationAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAuthenticationLogs indicates an expected call of LoadAuthenticationLogs.
func (mr *MockRegulatorProviderMockRecorder) LoadAuthenticationLogs(ctx, username, fromDate, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAuthenticationLogs", reflect.TypeOf((*MockRegulatorProvider)(nil).LoadAuthenticationLogs), ctx, username, fromDate, limit, page)
}
