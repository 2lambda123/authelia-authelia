// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia/v4/internal/trust (interfaces: CertificateProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	tls "crypto/tls"
	x509 "crypto/x509"
	reflect "reflect"

	schema "github.com/authelia/authelia/v4/internal/configuration/schema"
	gomock "github.com/golang/mock/gomock"
)

// MockCertificateTrust is a mock of CertificateProvider interface.
type MockCertificateTrust struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateTrustMockRecorder
}

// MockCertificateTrustMockRecorder is the mock recorder for MockCertificateTrust.
type MockCertificateTrustMockRecorder struct {
	mock *MockCertificateTrust
}

// NewMockCertificateTrust creates a new mock instance.
func NewMockCertificateTrust(ctrl *gomock.Controller) *MockCertificateTrust {
	mock := &MockCertificateTrust{ctrl: ctrl}
	mock.recorder = &MockCertificateTrustMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateTrust) EXPECT() *MockCertificateTrustMockRecorder {
	return m.recorder
}

// AddTrustedCertificate mocks base method.
func (m *MockCertificateTrust) AddTrustedCertificate(arg0 *x509.Certificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrustedCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrustedCertificate indicates an expected call of AddTrustedCertificate.
func (mr *MockCertificateTrustMockRecorder) AddTrustedCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrustedCertificate", reflect.TypeOf((*MockCertificateTrust)(nil).AddTrustedCertificate), arg0)
}

// AddTrustedCertificateFromPath mocks base method.
func (m *MockCertificateTrust) AddTrustedCertificateFromPath(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrustedCertificateFromPath", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrustedCertificateFromPath indicates an expected call of AddTrustedCertificateFromPath.
func (mr *MockCertificateTrustMockRecorder) AddTrustedCertificateFromPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrustedCertificateFromPath", reflect.TypeOf((*MockCertificateTrust)(nil).AddTrustedCertificateFromPath), arg0)
}

// AddTrustedCertificatesFromBytes mocks base method.
func (m *MockCertificateTrust) AddTrustedCertificatesFromBytes(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrustedCertificatesFromBytes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrustedCertificatesFromBytes indicates an expected call of AddTrustedCertificatesFromBytes.
func (mr *MockCertificateTrustMockRecorder) AddTrustedCertificatesFromBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrustedCertificatesFromBytes", reflect.TypeOf((*MockCertificateTrust)(nil).AddTrustedCertificatesFromBytes), arg0)
}

// GetCertPool mocks base method.
func (m *MockCertificateTrust) GetCertPool() *x509.CertPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertPool")
	ret0, _ := ret[0].(*x509.CertPool)
	return ret0
}

// GetCertPool indicates an expected call of GetCertPool.
func (mr *MockCertificateTrustMockRecorder) GetCertPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertPool", reflect.TypeOf((*MockCertificateTrust)(nil).GetCertPool))
}

// GetTLSConfig mocks base method.
func (m *MockCertificateTrust) GetTLSConfig(arg0 *schema.TLSConfig) *tls.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSConfig", arg0)
	ret0, _ := ret[0].(*tls.Config)
	return ret0
}

// GetTLSConfig indicates an expected call of GetTLSConfig.
func (mr *MockCertificateTrustMockRecorder) GetTLSConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSConfig", reflect.TypeOf((*MockCertificateTrust)(nil).GetTLSConfig), arg0)
}

// NewTLSConfig mocks base method.
func (m *MockCertificateTrust) NewTLSConfig(arg0 *schema.TLSConfig, arg1 *x509.CertPool) *tls.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTLSConfig", arg0, arg1)
	ret0, _ := ret[0].(*tls.Config)
	return ret0
}

// NewTLSConfig indicates an expected call of NewTLSConfig.
func (mr *MockCertificateTrustMockRecorder) NewTLSConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTLSConfig", reflect.TypeOf((*MockCertificateTrust)(nil).NewTLSConfig), arg0, arg1)
}

// StartupCheck mocks base method.
func (m *MockCertificateTrust) StartupCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartupCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartupCheck indicates an expected call of StartupCheck.
func (mr *MockCertificateTrustMockRecorder) StartupCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartupCheck", reflect.TypeOf((*MockCertificateTrust)(nil).StartupCheck))
}
